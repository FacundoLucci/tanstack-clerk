{"version":3,"sources":["../../src/server/loadOptions.ts"],"names":[],"mappings":";;;;;;;;;;;AAqBO,IAAM,WAAc,GAAA,CAAC,OAAkB,EAAA,SAAA,GAA2B,EAAO,KAAA;AAC9E,EAAA,MAAM,YAAe,GAAA,kBAAA,CAAmB,YAAa,CAAA,OAAO,CAAC,CAAA;AAE7D,EAAM,MAAA,SAAA,GAAY,UAAU,SAAa,IAAA,UAAA;AACzC,EAAM,MAAA,cAAA,GAAiB,UAAU,cAAkB,IAAA,eAAA;AACnD,EAAM,MAAA,MAAA,GAAS,UAAU,MAAU,IAAA,aAAA;AACnC,EAAA,MAAM,MAAS,GAAA,cAAA,CAAe,eAAe,CAAA,IAAK,yBAAyB,cAAc,CAAA;AACzF,EAAM,MAAA,MAAA,GAAS,gBAAgB,SAAU,CAAA,MAAA,EAAQ,IAAI,GAAI,CAAA,OAAA,CAAQ,GAAG,CAAC,CAAK,IAAA,MAAA;AAC1E,EAAM,MAAA,WAAA,GAAc,gBAAgB,SAAU,CAAA,WAAA,EAAa,IAAI,GAAI,CAAA,OAAA,CAAQ,GAAG,CAAC,CAAK,IAAA,YAAA;AACpF,EAAA,MAAM,6BAA6B,eAAgB,CAAA,SAAA,EAAW,QAAU,EAAA,YAAA,CAAa,UAAU,SAAS,CAAA;AACxG,EAAM,MAAA,SAAA,GAAY,UAAU,SAAa,IAAA,WAAA;AACzC,EAAM,MAAA,SAAA,GAAY,UAAU,SAAa,IAAA,WAAA;AACzC,EAAA,MAAM,cAAiB,GAAA,SAAA,CAAU,cAAkB,IAAA,qBAAA,EAAwB,CAAA,cAAA;AAC3E,EAAA,MAAM,cAAiB,GAAA,SAAA,CAAU,cAAkB,IAAA,qBAAA,EAAwB,CAAA,cAAA;AAE3E,EAAI,IAAA,QAAA;AACJ,EAAA,IAAI,CAAC,CAAC,0BAA8B,IAAA,kBAAA,CAAmB,0BAA0B,CAAG,EAAA;AAClF,IAAA,QAAA,GAAW,IAAI,GAAI,CAAA,0BAAA,EAA4B,YAAa,CAAA,QAAQ,EAAE,QAAS,EAAA;AAAA,GAC1E,MAAA;AACL,IAAW,QAAA,GAAA,0BAAA;AAAA;AAGb,EAAA,IAAI,CAAC,SAAW,EAAA;AACd,IAAM,MAAA,YAAA,CAAa,MAAM,+BAA+B,CAAA;AAAA;AAG1D,EAAA,IAAI,WAAe,IAAA,CAAC,QAAY,IAAA,CAAC,MAAQ,EAAA;AACvC,IAAM,MAAA,YAAA,CAAa,MAAM,sDAAsD,CAAA;AAAA;AAGjF,EAAA,IAAI,eAAe,CAAC,aAAA,CAAc,SAAS,CAAK,IAAA,0BAAA,CAA2B,SAAS,CAAG,EAAA;AACrF,IAAM,MAAA,YAAA,CAAa,MAAM,4DAA4D,CAAA;AAAA;AAGvF,EAAO,OAAA;AAAA;AAAA,IAEL,GAAG,SAAA;AAAA,IACH,SAAA;AAAA,IACA,cAAA;AAAA,IACA,MAAA;AAAA,IACA,MAAA;AAAA,IACA,MAAA;AAAA,IACA,WAAA;AAAA,IACA,QAAA;AAAA,IACA,SAAA;AAAA,IACA,SAAA;AAAA,IACA,cAAA;AAAA,IACA;AAAA,GACF;AACF","file":"loadOptions.js","sourcesContent":["import { createClerkRequest } from '@clerk/backend/internal';\nimport { apiUrlFromPublishableKey } from '@clerk/shared/apiUrlFromPublishableKey';\nimport { isDevelopmentFromSecretKey } from '@clerk/shared/keys';\nimport { isHttpOrHttps, isProxyUrlRelative } from '@clerk/shared/proxy';\nimport { handleValueOrFn } from '@clerk/shared/utils';\n\nimport { errorThrower } from '../utils';\nimport { getEnvVariable, getPublicEnvVariables } from '../utils/env';\nimport {\n  CLERK_JWT_KEY,\n  DOMAIN,\n  IS_SATELLITE,\n  PROXY_URL,\n  PUBLISHABLE_KEY,\n  SECRET_KEY,\n  SIGN_IN_URL,\n  SIGN_UP_URL,\n} from './constants';\nimport type { LoaderOptions } from './types';\nimport { patchRequest } from './utils';\n\nexport const loadOptions = (request: Request, overrides: LoaderOptions = {}) => {\n  const clerkRequest = createClerkRequest(patchRequest(request));\n\n  const secretKey = overrides.secretKey || SECRET_KEY;\n  const publishableKey = overrides.publishableKey || PUBLISHABLE_KEY;\n  const jwtKey = overrides.jwtKey || CLERK_JWT_KEY;\n  const apiUrl = getEnvVariable('CLERK_API_URL') || apiUrlFromPublishableKey(publishableKey);\n  const domain = handleValueOrFn(overrides.domain, new URL(request.url)) || DOMAIN;\n  const isSatellite = handleValueOrFn(overrides.isSatellite, new URL(request.url)) || IS_SATELLITE;\n  const relativeOrAbsoluteProxyUrl = handleValueOrFn(overrides?.proxyUrl, clerkRequest.clerkUrl, PROXY_URL);\n  const signInUrl = overrides.signInUrl || SIGN_IN_URL;\n  const signUpUrl = overrides.signUpUrl || SIGN_UP_URL;\n  const afterSignInUrl = overrides.afterSignInUrl || getPublicEnvVariables().afterSignInUrl;\n  const afterSignUpUrl = overrides.afterSignUpUrl || getPublicEnvVariables().afterSignUpUrl;\n\n  let proxyUrl;\n  if (!!relativeOrAbsoluteProxyUrl && isProxyUrlRelative(relativeOrAbsoluteProxyUrl)) {\n    proxyUrl = new URL(relativeOrAbsoluteProxyUrl, clerkRequest.clerkUrl).toString();\n  } else {\n    proxyUrl = relativeOrAbsoluteProxyUrl;\n  }\n\n  if (!secretKey) {\n    throw errorThrower.throw('Clerk: no secret key provided');\n  }\n\n  if (isSatellite && !proxyUrl && !domain) {\n    throw errorThrower.throw('Clerk: satellite mode requires a proxy URL or domain');\n  }\n\n  if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromSecretKey(secretKey)) {\n    throw errorThrower.throw('Clerk: satellite mode requires a sign-in URL in production');\n  }\n\n  return {\n    // used to append options that are not initialized from env\n    ...overrides,\n    secretKey,\n    publishableKey,\n    jwtKey,\n    apiUrl,\n    domain,\n    isSatellite,\n    proxyUrl,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n  };\n};\n"]}