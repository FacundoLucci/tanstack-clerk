{"version":3,"sources":["../../src/utils/env.ts"],"names":[],"mappings":";;;AAYO,IAAM,cAAiB,GAAA,CAAC,IAAc,EAAA,WAAA,GAAsB,EAAe,KAAA;AAEhF,EAAI,IAAA,OAAO,OAAY,KAAA,WAAA,IAAe,OAAQ,CAAA,GAAA,IAAO,OAAO,OAAQ,CAAA,GAAA,CAAI,IAAI,CAAA,KAAM,QAAU,EAAA;AAC1F,IAAO,OAAA,OAAA,CAAQ,GAAI,CAAA,IAAI,CAAK,IAAA,WAAA;AAAA;AAI9B,EAAI,IAAA,OAAO,MAAgB,CAAA,IAAA,KAAA,WAAA,IAAe,MAAY,CAAA,IAAA,CAAA,GAAA,IAAO,OAAO,MAAY,CAAA,IAAA,CAAA,GAAA,CAAI,IAAI,CAAA,KAAM,QAAU,EAAA;AAEtG,IAAO,OAAA,MAAA,CAAA,IAAA,CAAY,IAAI,IAAI,CAAA;AAAA;AAG7B,EAAO,OAAA,WAAA;AACT;AAEO,IAAM,wBAAwB,MAAM;AACzC,EAAO,OAAA;AAAA,IACL,cAAgB,EAAA,cAAA,CAAe,4BAA4B,CAAA,IAAK,eAAe,uBAAuB,CAAA;AAAA,IACtG,MAAQ,EAAA,cAAA,CAAe,mBAAmB,CAAA,IAAK,eAAe,cAAc,CAAA;AAAA,IAC5E,WAAA,EAAa,SAAS,cAAe,CAAA,yBAAyB,CAAC,CAAK,IAAA,QAAA,CAAS,cAAe,CAAA,oBAAoB,CAAC,CAAA;AAAA,IACjH,QAAU,EAAA,cAAA,CAAe,sBAAsB,CAAA,IAAK,eAAe,iBAAiB,CAAA;AAAA,IACpF,EAAI,EAAA,cAAA,CAAe,4BAA4B,CAAA,IAAK,eAAe,uBAAuB,CAAA;AAAA,IAC1F,SAAW,EAAA,cAAA,CAAe,wBAAwB,CAAA,IAAK,eAAe,mBAAmB,CAAA;AAAA,IACzF,SAAW,EAAA,cAAA,CAAe,wBAAwB,CAAA,IAAK,eAAe,mBAAmB,CAAA;AAAA,IACzF,UAAY,EAAA,cAAA,CAAe,mBAAmB,CAAA,IAAK,eAAe,UAAU,CAAA;AAAA,IAC5E,cAAiB,EAAA,cAAA,CAAe,uBAAuB,CAAA,IAAK,eAAe,kBAAkB,CAAA;AAAA,IAI7F,cAAgB,EAAA,cAAA,CAAe,uBAAuB,CAAA,IAAK,eAAe,kBAAkB,CAAA;AAAA,IAC5F,iBAAA,EACE,SAAS,cAAe,CAAA,+BAA+B,CAAC,CAAK,IAAA,QAAA,CAAS,cAAe,CAAA,0BAA0B,CAAC,CAAA;AAAA,IAClH,cAAA,EACE,SAAS,cAAe,CAAA,4BAA4B,CAAC,CAAK,IAAA,QAAA,CAAS,cAAe,CAAA,uBAAuB,CAAC,CAAA;AAAA,IAC5G,cAAgB,EAAA,cAAA,CAAe,8BAA8B,CAAA,IAAK,eAAe,yBAAyB,CAAA;AAAA,IAC1G,cAAgB,EAAA,cAAA,CAAe,8BAA8B,CAAA,IAAK,eAAe,yBAAyB;AAAA,GAC5G;AACF","file":"env.js","sourcesContent":["import { isTruthy } from '@clerk/shared/underscore';\n\n/**\n *\n * Utility function to get env variables.\n *\n * @param name env variable name\n * @param defaultVaue default value to return if the env variable is not set\n * @returns string\n *\n * @internal\n */\nexport const getEnvVariable = (name: string, defaultVaue: string = ''): string => {\n  // Node envs\n  if (typeof process !== 'undefined' && process.env && typeof process.env[name] === 'string') {\n    return process.env[name] || defaultVaue;\n  }\n\n  // @ts-expect-error - Vite specific\n  if (typeof import.meta !== 'undefined' && import.meta.env && typeof import.meta.env[name] === 'string') {\n    // @ts-expect-error - Vite specific\n    return import.meta.env[name];\n  }\n\n  return defaultVaue;\n};\n\nexport const getPublicEnvVariables = () => {\n  return {\n    publishableKey: getEnvVariable('VITE_CLERK_PUBLISHABLE_KEY') || getEnvVariable('CLERK_PUBLISHABLE_KEY'),\n    domain: getEnvVariable('VITE_CLERK_DOMAIN') || getEnvVariable('CLERK_DOMAIN'),\n    isSatellite: isTruthy(getEnvVariable('VITE_CLERK_IS_SATELLITE')) || isTruthy(getEnvVariable('CLERK_IS_SATELLITE')),\n    proxyUrl: getEnvVariable('VITE_CLERK_PROXY_URL') || getEnvVariable('CLERK_PROXY_URL'),\n    pk: getEnvVariable('VITE_CLERK_PUBLISHABLE_KEY') || getEnvVariable('CLERK_PUBLISHABLE_KEY'),\n    signInUrl: getEnvVariable('VITE_CLERK_SIGN_IN_URL') || getEnvVariable('CLERK_SIGN_IN_URL'),\n    signUpUrl: getEnvVariable('VITE_CLERK_SIGN_UP_URL') || getEnvVariable('CLERK_SIGN_UP_URL'),\n    clerkJsUrl: getEnvVariable('VITE_CLERK_JS_URL') || getEnvVariable('CLERK_JS'),\n    clerkJsVariant: (getEnvVariable('VITE_CLERK_JS_VARIANT') || getEnvVariable('CLERK_JS_VARIANT')) as\n      | ''\n      | 'headless'\n      | undefined,\n    clerkJsVersion: getEnvVariable('VITE_CLERK_JS_VERSION') || getEnvVariable('CLERK_JS_VERSION'),\n    telemetryDisabled:\n      isTruthy(getEnvVariable('VITE_CLERK_TELEMETRY_DISABLED')) || isTruthy(getEnvVariable('CLERK_TELEMETRY_DISABLED')),\n    telemetryDebug:\n      isTruthy(getEnvVariable('VITE_CLERK_TELEMETRY_DEBUG')) || isTruthy(getEnvVariable('CLERK_TELEMETRY_DEBUG')),\n    afterSignInUrl: getEnvVariable('VITE_CLERK_AFTER_SIGN_IN_URL') || getEnvVariable('CLERK_AFTER_SIGN_IN_URL'),\n    afterSignUpUrl: getEnvVariable('VITE_CLERK_AFTER_SIGN_UP_URL') || getEnvVariable('CLERK_AFTER_SIGN_UP_URL'),\n  };\n};\n"]}