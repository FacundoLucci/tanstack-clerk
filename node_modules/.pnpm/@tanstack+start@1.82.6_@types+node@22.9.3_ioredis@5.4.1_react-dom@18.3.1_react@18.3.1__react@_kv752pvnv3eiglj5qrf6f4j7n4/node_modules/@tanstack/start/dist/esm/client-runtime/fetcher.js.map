{"version":3,"file":"fetcher.js","sources":["../../../src/client-runtime/fetcher.tsx"],"sourcesContent":["import {\n  defaultTransformer,\n  encode,\n  isNotFound,\n  isPlainObject,\n  isRedirect,\n} from '@tanstack/react-router'\nimport type { MiddlewareOptions } from '../client/createServerFn'\n\nexport async function fetcher(\n  base: string,\n  args: Array<any>,\n  handler: (request: Request) => Promise<Response>,\n) {\n  const _first = args[0]\n\n  // If createServerFn was used to wrap the fetcher,\n  // We need to handle the arguments differently\n  if (isPlainObject(_first) && _first.method) {\n    const first = _first as MiddlewareOptions\n    const type = first.data instanceof FormData ? 'formData' : 'payload'\n\n    // Arrange the headers\n    const headers = new Headers({\n      ...(type === 'payload'\n        ? {\n            'content-type': 'application/json',\n            accept: 'application/json',\n          }\n        : {}),\n      ...(first.headers instanceof Headers\n        ? Object.fromEntries(first.headers.entries())\n        : first.headers || {}),\n    })\n\n    // If the method is GET, we need to move the payload to the query string\n    if (first.method === 'GET') {\n      // If the method is GET, we need to move the payload to the query string\n      const encodedPayload = encode({\n        payload: defaultTransformer.stringify({\n          data: first.data,\n          context: first.context,\n        }),\n      })\n\n      if (encodedPayload) base += `&${encodedPayload}`\n    }\n\n    // Create the request\n    const request = new Request(base, {\n      method: first.method,\n      headers,\n      ...getFetcherRequestOptions(first),\n    })\n\n    const handlerResponse = await handler(request)\n\n    const response = await handleResponseErrors(handlerResponse)\n\n    // Check if the response is JSON\n    if (response.headers.get('content-type')?.includes('application/json')) {\n      const text = await response.text()\n      const json = text ? defaultTransformer.parse(text) : undefined\n\n      // If the response is a redirect or not found, throw it\n      // for the router to handle\n      if (isRedirect(json) || isNotFound(json)) {\n        throw json\n      }\n\n      return json\n    }\n\n    // Must be a raw response\n    return response\n  }\n\n  // If not a custom fetcher, just proxy the arguments\n  // through as a POST request\n  const request = new Request(base, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(args),\n  })\n\n  const response = await handleResponseErrors(await handler(request))\n\n  // If the response is JSON, return it parsed\n  const contentType = response.headers.get('content-type')\n  const text = await response.text()\n  if (contentType && contentType.includes('application/json')) {\n    return text ? JSON.parse(text) : undefined\n  } else {\n    // Otherwise, return the text as a fallback\n    // If the user wants more than this, they can pass a\n    // request instead\n    return text\n  }\n}\n\nfunction getFetcherRequestOptions(opts: MiddlewareOptions) {\n  if (opts.method === 'POST') {\n    if (opts.data instanceof FormData) {\n      opts.data.set('__TSR_CONTEXT', defaultTransformer.stringify(opts.context))\n      return {\n        body: opts.data,\n      }\n    }\n\n    return {\n      body: defaultTransformer.stringify({\n        data: opts.data ?? null,\n        context: opts.context,\n      }),\n    }\n  }\n\n  return {}\n}\n\nasync function handleResponseErrors(response: Response) {\n  if (!response.ok) {\n    const contentType = response.headers.get('content-type')\n    const isJson = contentType && contentType.includes('application/json')\n\n    const body = await (async () => {\n      if (isJson) {\n        return await response.json()\n      }\n      return await response.text()\n    })()\n\n    const message = `Request failed with status ${response.status}`\n\n    if (isJson) {\n      throw new Error(\n        JSON.stringify({\n          message,\n          body,\n        }),\n      )\n    } else {\n      throw new Error(\n        [message, `${JSON.stringify(body, null, 2)}`].join('\\n\\n'),\n      )\n    }\n  }\n\n  return response\n}\n"],"names":["request","response","text"],"mappings":"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"}