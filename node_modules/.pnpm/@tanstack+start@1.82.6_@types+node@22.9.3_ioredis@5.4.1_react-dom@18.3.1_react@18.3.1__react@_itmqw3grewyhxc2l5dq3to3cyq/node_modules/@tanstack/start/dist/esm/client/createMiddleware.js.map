{"version":3,"file":"createMiddleware.js","sources":["../../../src/client/createMiddleware.ts"],"sourcesContent":["import type { ConstrainValidator, Method } from './createServerFn'\nimport type {\n  Constrain,\n  DefaultTransformerStringify,\n  Expand,\n  MergeAll,\n  ResolveValidatorInput,\n  ResolveValidatorOutput,\n} from '@tanstack/react-router'\n\n/**\n * Turns all middleware into a union\n */\nexport type ParseMiddlewares<\n  TMiddlewares,\n  TAcc = never,\n> = unknown extends TMiddlewares\n  ? TAcc\n  : [] extends TMiddlewares\n    ? TAcc\n    : TMiddlewares extends ReadonlyArray<AnyMiddleware>\n      ? TMiddlewares[number] extends infer TMiddleware extends AnyMiddleware\n        ? TMiddleware extends any\n          ? ParseMiddlewares<\n              TMiddleware['_types']['middlewares'],\n              TAcc | TMiddleware\n            >\n          : TAcc\n        : TAcc\n      : TAcc\n\nexport type ResolveAllMiddlewareServerContext<\n  TMiddlewares,\n  TContext = undefined,\n> = ParseMiddlewares<TMiddlewares>['_types']['serverContext'] | TContext\n\n/**\n * Recursively resolve the server context type produced by a sequence of middleware\n */\nexport type MergeAllServerContext<TMiddlewares, TContext = undefined> = Expand<\n  MergeAll<\n    ResolveAllMiddlewareServerContext<TMiddlewares, TContext> extends undefined\n      ? undefined\n      : NonNullable<ResolveAllMiddlewareServerContext<TMiddlewares, TContext>>\n  >\n>\n\nexport type ResolveAllMiddlewareClientContext<\n  TMiddlewares,\n  TContext = undefined,\n> = ParseMiddlewares<TMiddlewares>['_types']['clientContext'] | TContext\n\n/**\n * Recursively resolve the client context type produced by a sequence of middleware\n */\nexport type MergeAllClientContext<TMiddlewares, TContext = undefined> = Expand<\n  MergeAll<\n    ResolveAllMiddlewareClientContext<TMiddlewares, TContext> extends undefined\n      ? undefined\n      : NonNullable<ResolveAllMiddlewareClientContext<TMiddlewares, TContext>>\n  >\n>\n\nexport type ResolveAllMiddlewareClientAfterContext<\n  TMiddlewares,\n  TContext = undefined,\n> =\n  | ParseMiddlewares<TMiddlewares>['_types']['clientContext']\n  | ParseMiddlewares<TMiddlewares>['_types']['clientAfterContext']\n  | TContext\n\nexport type MergeAllClientAfterContext<\n  TMiddlewares,\n  TClientContext = undefined,\n  TClientAfterContext = undefined,\n> = Expand<\n  MergeAll<\n    ResolveAllMiddlewareClientAfterContext<\n      TMiddlewares,\n      TClientContext | TClientAfterContext\n    > extends undefined\n      ? undefined\n      : NonNullable<\n          ResolveAllMiddlewareClientAfterContext<\n            TMiddlewares,\n            TClientContext | TClientAfterContext\n          >\n        >\n  >\n>\n\nexport type ResolveAllValidators<TMiddlewares, TValidator> =\n  | ParseMiddlewares<TMiddlewares>['_types']['validator']\n  | TValidator\n\nexport type ResolveAllValidatorInputs<TMiddlewares, TValidator> =\n  ResolveAllValidators<TMiddlewares, TValidator> extends undefined\n    ? undefined\n    : ResolveValidatorInput<\n        NonNullable<ResolveAllValidators<TMiddlewares, TValidator>>\n      >\n\n/**\n * Recursively resolve the input type produced by a sequence of middleware\n */\nexport type MergeAllValidatorInputs<TMiddlewares, TValidator> = Expand<\n  MergeAll<ResolveAllValidatorInputs<TMiddlewares, TValidator>>\n>\n\nexport type ResolveAllValidatorOutputs<TMiddlewares, TValidator> =\n  ResolveAllValidators<TMiddlewares, TValidator> extends undefined\n    ? undefined\n    : ResolveValidatorOutput<\n        NonNullable<ResolveAllValidators<TMiddlewares, TValidator>>\n      >\n\n/**\n * Recursively merge the output type produced by a sequence of middleware\n */\nexport type MergeAllValidatorOutputs<TMiddlewares, TValidator> = Expand<\n  MergeAll<ResolveAllValidatorOutputs<TMiddlewares, TValidator>>\n>\n\nexport interface MiddlewareOptions<\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n> {\n  validateClient?: boolean\n  middleware?: TMiddlewares\n  validator?: ConstrainValidator<TValidator>\n  client?: MiddlewareClientFn<\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext\n  >\n  server?: MiddlewareServerFn<\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    unknown,\n    unknown\n  >\n  clientAfter?: MiddlewareClientAfterFn<\n    TMiddlewares,\n    TValidator,\n    TClientContext,\n    unknown,\n    unknown\n  >\n}\n\nexport type MiddlewareServerFn<\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TNewServerContext,\n  TNewClientAfterContext,\n> = (options: {\n  data: MergeAllValidatorOutputs<TMiddlewares, NonNullable<TValidator>>\n  context: MergeAllServerContext<TMiddlewares, NonNullable<TServerContext>>\n  next: <\n    TNewServerContext = undefined,\n    TNewClientAfterContext = undefined,\n  >(ctx?: {\n    context?: TNewServerContext\n    sendContext?: DefaultTransformerStringify<TNewClientAfterContext>\n  }) => Promise<\n    ServerResultWithContext<TNewServerContext, TNewClientAfterContext>\n  >\n}) =>\n  | Promise<ServerResultWithContext<TNewServerContext, TNewClientAfterContext>>\n  | ServerResultWithContext<TNewServerContext, TNewClientAfterContext>\n\nexport type MiddlewareClientFn<\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n> = (options: {\n  data: MergeAllValidatorInputs<TMiddlewares, NonNullable<TValidator>>\n  context: MergeAllClientContext<TMiddlewares>\n  sendContext?: unknown // cc Chris Horobin\n  method: Method\n  next: <TNewServerContext = undefined, TNewClientContext = undefined>(ctx?: {\n    context?: TNewClientContext\n    sendContext?: DefaultTransformerStringify<TNewServerContext>\n    headers?: HeadersInit\n  }) => Promise<ClientResultWithContext<TNewServerContext, TNewClientContext>>\n}) =>\n  | Promise<ClientResultWithContext<TServerContext, TClientContext>>\n  | ClientResultWithContext<TServerContext, TClientContext>\n\nexport type MiddlewareClientAfterFn<\n  TMiddlewares,\n  TValidator,\n  TClientContext,\n  TClientAfterContext,\n  TNewClientAfterContext,\n> = (options: {\n  data: MergeAllValidatorInputs<TMiddlewares, NonNullable<TValidator>>\n  context: MergeAllClientAfterContext<\n    TMiddlewares,\n    TClientContext,\n    TClientAfterContext\n  >\n  method: Method\n  next: <TNewClientAfterContext = undefined>(ctx?: {\n    context?: TNewClientAfterContext\n    sendContext?: never\n    headers?: HeadersInit\n  }) => Promise<ClientAfterResultWithContext<TNewClientAfterContext>>\n}) =>\n  | Promise<ClientAfterResultWithContext<TNewClientAfterContext>>\n  | ClientAfterResultWithContext<TNewClientAfterContext>\n\nexport type ServerResultWithContext<TContext, TClientAfterContext> = {\n  'use functions must return the result of next()': true\n  context: TContext\n  clientAfterContext: TClientAfterContext\n}\n\nexport type ClientAfterResultWithContext<TClientContext> = {\n  'use functions must return the result of next()': true\n  context: TClientContext\n  headers: HeadersInit\n}\n\nexport type ClientResultWithContext<TServerContext, TClientContext> = {\n  'use functions must return the result of next()': true\n  context: TClientContext\n  serverContext: TServerContext\n  headers: HeadersInit\n}\n\nexport type AnyMiddleware = MiddlewareTypes<any, any, any, any, any, any>\n\nexport interface MiddlewareTypes<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> {\n  _types: {\n    id: TId\n    middlewares: TMiddlewares\n    input: ResolveValidatorInput<TValidator>\n    output: ResolveValidatorOutput<TValidator>\n    clientContext: TClientContext\n    serverContext: TServerContext\n    clientAfterContext: TClientAfterContext\n    validator: TValidator\n  }\n  options: MiddlewareOptions<\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext\n  >\n}\n\nexport interface MiddlewareValidator<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> {\n  validator: <TNewValidator>(\n    input: ConstrainValidator<TNewValidator>,\n  ) => MiddlewareAfterMiddleware<\n    TId,\n    TMiddlewares,\n    NonNullable<TValidator> | TNewValidator,\n    TServerContext,\n    TClientContext,\n    TClientAfterContext\n  >\n}\n\nexport interface MiddlewareClientAfter<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> {\n  clientAfter: <TNewClientAfterContext = undefined>(\n    clientAfter: MiddlewareClientAfterFn<\n      TMiddlewares,\n      TValidator,\n      TClientContext,\n      TClientAfterContext,\n      TNewClientAfterContext\n    >,\n  ) => MiddlewareAfterServer<\n    TId,\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext,\n    TClientAfterContext | TNewClientAfterContext\n  >\n}\n\nexport interface MiddlewareAfterServer<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> extends MiddlewareTypes<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    >,\n    MiddlewareClientAfter<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    > {}\n\nexport interface MiddlewareServer<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> {\n  server: <TNewServerContext = undefined, TNewClientAfterContext = undefined>(\n    server: MiddlewareServerFn<\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TNewServerContext,\n      TNewClientAfterContext\n    >,\n  ) => MiddlewareAfterServer<\n    TId,\n    TMiddlewares,\n    TValidator,\n    TServerContext | TNewServerContext,\n    TClientContext,\n    TClientAfterContext | TNewClientAfterContext\n  >\n}\n\nexport interface MiddlewareAfterClient<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> extends MiddlewareTypes<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    >,\n    MiddlewareServer<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    > {}\n\nexport interface MiddlewareClient<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> {\n  client: <TNewServerContext = undefined, TNewClientContext = undefined>(\n    client: MiddlewareClientFn<\n      TMiddlewares,\n      TValidator,\n      TNewServerContext,\n      TNewClientContext\n    >,\n  ) => MiddlewareAfterClient<\n    TId,\n    TMiddlewares,\n    TValidator,\n    TServerContext | TNewServerContext,\n    TClientContext | TNewClientContext,\n    TClientAfterContext\n  >\n}\n\nexport interface MiddlewareAfterMiddleware<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> extends MiddlewareTypes<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    >,\n    MiddlewareServer<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    >,\n    MiddlewareClient<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    >,\n    MiddlewareValidator<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    > {}\n\nexport interface Middleware<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> extends MiddlewareAfterMiddleware<\n    TId,\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext,\n    TClientAfterContext\n  > {\n  middleware: <const TNewMiddlewares>(\n    middlewares: Constrain<TNewMiddlewares, ReadonlyArray<AnyMiddleware>>,\n  ) => MiddlewareAfterMiddleware<\n    TId,\n    TNewMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext,\n    TClientAfterContext\n  >\n}\n\nexport function createMiddleware<\n  const TId,\n  const TMiddlewares,\n  TValidator = undefined,\n  TServerContext = undefined,\n  TClientContext = undefined,\n  TClientAfterContext = undefined,\n>(\n  options?: {\n    validateClient?: boolean\n  },\n  __opts?: MiddlewareOptions<\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext\n  >,\n): Middleware<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext\n> {\n  // const resolvedOptions = (__opts || options) as MiddlewareOptions<\n  const resolvedOptions =\n    __opts ||\n    ((options || {}) as MiddlewareOptions<\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext\n    >)\n\n  return {\n    options: resolvedOptions as any,\n    middleware: (middleware: any) => {\n      return createMiddleware<\n        TId,\n        TMiddlewares,\n        TValidator,\n        TServerContext,\n        TClientContext\n      >(undefined, Object.assign(resolvedOptions, { middleware })) as any\n    },\n    validator: (validator: any) => {\n      return createMiddleware<\n        TId,\n        TMiddlewares,\n        TValidator,\n        TServerContext,\n        TClientContext\n      >(undefined, Object.assign(resolvedOptions, { validator })) as any\n    },\n    client: (client: any) => {\n      return createMiddleware<\n        TId,\n        TMiddlewares,\n        TValidator,\n        TServerContext,\n        TClientContext\n      >(undefined, Object.assign(resolvedOptions, { client })) as any\n    },\n    server: (server: any) => {\n      return createMiddleware<\n        TId,\n        TMiddlewares,\n        TValidator,\n        TServerContext,\n        TClientContext\n      >(undefined, Object.assign(resolvedOptions, { server })) as any\n    },\n    clientAfter: (clientAfter: any) => {\n      return createMiddleware<\n        TId,\n        TMiddlewares,\n        TValidator,\n        TServerContext,\n        TClientContext\n      >(undefined, Object.assign(resolvedOptions, { clientAfter })) as any\n    },\n  } as unknown as Middleware<\n    TId,\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext,\n    TClientAfterContext\n  >\n}\n"],"names":[],"mappings":"AA6dgB,SAAA,iBAQd,SAGA,QAaA;AAEM,QAAA,kBACJ,WACE,WAAW;AAOR,SAAA;AAAA,IACL,SAAS;AAAA,IACT,YAAY,CAAC,eAAoB;AACxB,aAAA,iBAML,QAAW,OAAO,OAAO,iBAAiB,EAAE,WAAA,CAAY,CAAC;AAAA,IAC7D;AAAA,IACA,WAAW,CAAC,cAAmB;AACtB,aAAA,iBAML,QAAW,OAAO,OAAO,iBAAiB,EAAE,UAAA,CAAW,CAAC;AAAA,IAC5D;AAAA,IACA,QAAQ,CAAC,WAAgB;AAChB,aAAA,iBAML,QAAW,OAAO,OAAO,iBAAiB,EAAE,OAAA,CAAQ,CAAC;AAAA,IACzD;AAAA,IACA,QAAQ,CAAC,WAAgB;AAChB,aAAA,iBAML,QAAW,OAAO,OAAO,iBAAiB,EAAE,OAAA,CAAQ,CAAC;AAAA,IACzD;AAAA,IACA,aAAa,CAAC,gBAAqB;AAC1B,aAAA,iBAML,QAAW,OAAO,OAAO,iBAAiB,EAAE,YAAA,CAAa,CAAC;AAAA,IAAA;AAAA,EAEhE;AAQF;"}